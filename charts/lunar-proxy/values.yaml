# Default values for lunar-proxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: lunarapi/lunar-proxy
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

replicaCount: 1

podAnnotations: {}

lunarAPIKey: null # Set the API key directly
lunarAPIKeySecretName: null # Set the API key from a secret (key must be named lunarAPIKey)

env: null
logLevel: "error"
tenantName: null
lunarStreamsEnabled: false
redisUrl: null
lunarHubURL: null
redisUseCluster: false
awsAccessKeyId: null
telemetryEnabled: true
awsSecretAccessKey: null
lunarManaged: false

lunarFlushSeconds: 10

livenessProbe:
  initialDelaySeconds: 15
  periodSeconds: 5

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 2

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8000
  healthCheckPort: 8040
  adminPort: 8081

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "lunar-proxy"

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'containerResources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
  tls: []
  hosts:
    - host: lunar-proxy-example.local
      paths:
        - path: /apply_policies
          pathType: Prefix
          backend:
            service:
              name: lunar-proxy-test
              port:
                number: 8081
        - path: /healthcheck
          pathType: Prefix
          backend:
            service:
              name: lunar-proxy-test
              port:
                number: 8040
        - path: /
          pathType: Prefix
          backend:
            service:
              name: lunar-proxy-test
              port:
                number: 8000
        - path: /metrics
          pathType: Prefix
          backend:
            service:
              name: lunar-proxy-test
              port:
                number: 3000

serviceMonitor:
  enabled: false
  port: 3000
  # force namespace
  # namespace: monitoring

  # Fallback to the prometheus default unless specified
  # interval: 10s

  ## scheme: HTTP scheme to use for scraping. Can be used with `tlsConfig` for example if using istio mTLS.
  # scheme: ""

  ## tlsConfig: TLS configuration to use when scraping the endpoint. For example if using istio mTLS.
  ## Of type: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#tlsconfig
  # tlsConfig: {}

  # bearerTokenFile:
  # Fallback to the prometheus default unless specified
  # scrapeTimeout: 30s

  ## Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  additionalLabels: {}

  ## Used to pass annotations that are used by the Prometheus installed in your cluster to select Service Monitors to work with
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  annotations: {}

  ## Metric relabel configs to apply to samples before ingestion.
  ## [Metric Relabeling](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs)
  metricRelabelings: []
  # - action: keep
  #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
  #   sourceLabels: [__name__]

  ## Relabel configs to apply to samples before ingestion.
  ## [Relabeling](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config)
  relabelings: []
  # - sourceLabels: [__meta_kubernetes_pod_node_name]
  #   separator: ;
  #   regex: ^(.*)$
  #   targetLabel: nodename
  #   replacement: $1
  #   action: replace

  targetLabels: []

policies:
  global: {}
  endpoints: []
  exporters:
    file:
      file_dir: "/var/log/lunar-proxy"
      file_name: "output.log"

# ==== Example of flows and quotas: ====
# flows:
#   rate_limit_flow.yaml: |
#     name: RateLimitFlow

#     filter:
#       url: httpbin.org/*

#     processors:
#       Limiter:
#         processor: Limiter
#         parameters:
#           - key: quota_id
#             value: MyLimitResource

#       GenerateResponse:
#         processor: GenerateResponse

#       GenerateResponseTooManyRequests:
#         processor: GenerateResponse
#         parameters:
#           - key: status
#             value: 429
#           - key: body
#             value: Too many requests
#           - key: Content-Type
#             value: text/plain

#     flow:
#       request:
#         - from:
#             stream:
#               name: globalStream
#               at: start
#           to:
#             processor:
#               name: Limiter

#         - from:
#             processor:
#               name: Limiter
#               condition: below_limit
#           to:
#             stream:
#               name: globalStream
#               at: end

#         - from:
#             processor:
#               name: Limiter
#               condition: above_limit
#           to:
#             processor: 
#               name: GenerateResponseTooManyRequests

#       response:
#         - from:
#             processor:
#               name: GenerateResponseTooManyRequests
#           to:
#             stream:
#               name: globalStream
#               at: start

#         - from:
#             stream:
#               name: globalStream
#               at: start
#           to:
#             processor: 
#               name: GenerateResponse

#         - from:
#             processor:
#               name: GenerateResponse
#           to:
#             stream:
#               name: globalStream
#               at: end

# quotas:
#   rate_limit_quota.yaml: |
#     quota:
#       id: MyLimitResource
#       filter:
#         url: httpbin.org/*
#       strategy:
#         fixed_window:
#           max: 2
#           interval: 20
#           interval_unit: second
